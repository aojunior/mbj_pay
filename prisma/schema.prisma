// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

generator client {
  provider = "prisma-client-js"
  engineType = "binary"
  binaryTargets = ["native", "windows"]
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model Client {
  accountId       String @unique
  accountHolderId String
  accountBank     Int?
  branchBank      Int?
  companyName     String
  email           String
  taxId           String
  phoneNumber     String
  saltKey         String
  hashPassword    String
  status          String
  createdAT       DateTime  @default(now())
  aliases         Aliases[]
  transactions    Transactions[]
  mediator        Mediator[]
  recipients      FavoritesRecipients[]
  information     Informations[]
}

model Informations {
  latitude    Float
  longitude   Float
  city        String
  state       String
  country      String
  zipCode     String
  createdAT   DateTime @default(now())
  time        String
  ip          String
  accountId   String
  deviceId    String  @unique
  deviceName  String
  client      Client  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model Aliases {
  alias       String @unique
  accountId   String
  type        String
  status      String
  active      String
  createdAT   DateTime  @default(now())
  client      Client  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model Transactions {
  id                      String @id @default(cuid())
  transactionId           String
  accountId               String
  transactionType         String
  amount                  Float
  status                  String
  identify                String? 
  transactionDescription  String?
  message                 String?
  createdAT               DateTime  @default(now())
  updatedAT               DateTime?
  client        Client  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model FavoritesRecipients {
  id          String @id @default(cuid())
  accountId   String
  nickname    String
  type        String
  taxId       String
  pixKey      String?
  bankAgency  String?
  bankAccount String?
  bankBranch  String?
  bankCode    String?
  createdAT   DateTime @default(now())
  client      Client  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model SecureDevice {
  id          String @id @default(cuid())
  accountId   String
  deviceId    String @unique
  deviceName  String?
  type        String?
  active      String
  createdAT   DateTime  @default(now())
  updatedAT   DateTime?
}

model Mediator {
  id                String @id @default(cuid())
  accountId         String
  mediatorAccountId String
  mediatorFee       Float
  client      Client  @relation(fields: [accountId], references: [accountId], onDelete: Cascade)
}

model settings {
  email String  @id
  host  String
  port  String
  password String
  sms   String?
  push  String?
  createdAt DateTime @default(now())
}